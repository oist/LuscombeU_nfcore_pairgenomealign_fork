/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUTN_TARGET {
        ext.args = { "-n 10 -p 100000" }
    }

    withName: CUTN_QUERY {
        ext.args = { "-n 10 -p 100000" }
    }

    withName: 'ALIGNMENT_LASTDB' {
        // See https://gitlab.com/mcfrith/last/-/blob/main/doc/lastdb.rst for details
        // -R01: uppercase all sequences and then lowercase simple repeats with tantan
        // -R10: keep original lowercase masking
        // -c: soft-mask lowercase letters
        // -S2: index both strands
        ext.args = { "${params.softmask=="tantan" ? '-R01' : '-R11'} -c -u${params.seed} -S2" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ALIGNMENT_SPLIT_O2M' {
        ext.prefix = { "${meta.id}.o2m_aln" }
        ext.args = { "--reverse -m${params.last_split_mismap}" }
        if (params.cram) {
            publishDir = [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('.tsv') ? filename : null }
            ]
        }
    }

    withName: 'ALIGNMENT_SPLIT_M2O' {
        ext.prefix = { "${meta.id}.m2o_aln" }
        ext.args = { "-m${params.last_split_mismap}" }
        if (params.cram) {
            publishDir = [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('.tsv') ? filename : null }
            ]
        }
    }

    withName: 'ALIGNMENT_SPLIT_O2O' {
        ext.prefix = { "${meta.id}.o2o_aln" }
        ext.args = { "--reverse -m${params.last_split_mismap}" }
        if (params.cram) {
            publishDir = [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('.tsv') ? filename : null }
            ]
        }
    }

    withName: 'ALIGNMENT_TRAIN' {
        // If the training step fails, it is likely that there are no
        // alignments to be found with the selected seed. Ignore and therefore
        // skip alignments instead of crashing the pipeline.
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
        ext.args = { "--revsym ${params.lastal_args}" }
    }

    withname: 'LAST_LASTAL' {
        publishDir = { publishDir + params.cram ? [ saveAs: { filename -> filename.endsWith('.tsv') ? filename : [] } ] : [] }
    }

    withName: 'ALIGNMENT_LASTAL_M2O' {
        // Always retry because SLURM is not good at conveing information on OOM kills in shell pipelines to Nextflow
        errorStrategy = { 'retry' }
        // Allow for more failures because of a few outliers (like newt genomes) needing lots of memory
        maxRetries    = 2
        ext.prefix = { "${meta.id}.m2o_aln" }
        ext.args = { "--split-f=MAF+ ${params.lastal_args} ${params.lastal_extr_args}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ALIGNMENT_LASTAL_M2M' {
        // Always retry because SLURM is not good at conveing information on OOM kills in shell pipelines to Nextflow
        errorStrategy = { 'retry' }
        // Allow for more failures because of a few outliers (like newt genomes) needing lots of memory
        maxRetries    = 2
        ext.prefix = { "${meta.id}.m2m_aln" }
        ext.args = { "${params.lastal_args} ${params.lastal_extr_args}" }
        if (params.cram) {
            publishDir = [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('.tsv') ? filename : null }
            ]
        }
    }

    withName: 'LAST_DOTPLOT' {
        // The number one cause of failure is absence of alignments.
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
        ext.args = { "--rot2=h --sort2=3 --strands2=1 --width=${params.dotplot_width} --height=${params.dotplot_height} --fontsize=${params.dotplot_font_size} ${params.dotplot_options}" }
    }

    withName: 'ALIGNMENT_DOTPLOT_O2O' {
        ext.prefix = { "${meta.id}.o2o_plt" }
    }

    withName: 'ALIGNMENT_DOTPLOT_M2O' {
        ext.prefix = { "${meta.id}.m2o_plt" }
    }

    withName: 'ALIGNMENT_DOTPLOT_O2M' {
        ext.prefix = { "${meta.id}.o2m_plt" }
    }

    withName: 'ALIGNMENT_DOTPLOT_M2M' {
        ext.prefix = { "${meta.id}.m2m_plt" }
    }

    withName: 'ALIGNMENT_DOTPLOT_O2O_FLT' {
        ext.prefix = { "${meta.id}.o2o_plt_filtered" }
    }
    withName: 'ALIGNMENT_DOTPLOT_M2O_FLT' {
        ext.prefix = { "${meta.id}.m2o_plt_filtered" }
    }
    withName: 'ALIGNMENT_DOTPLOT_O2M_FLT' {
        ext.prefix = { "${meta.id}.o2m_plt_filtered" }
    }
    withName: 'ALIGNMENT_DOTPLOT_M2M_FLT' {
        ext.prefix = { "${meta.id}.m2m_plt_filtered" }
    }

//  withName: ALIGNMENT_EXP {
//      publishDir = [
//          path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
//          mode: params.publish_dir_mode,
//          saveAs: { filename ->
//              if (filename.equals('versions.yml')) {
//                  return null
//              } else if (params.cram && (filename.endsWith('.cram') | filename.endsWith('.fasta.gz'))) {
//                  return null
//              } else {
//                  return filename
//              }
//          }
//      ]
//  }

    withName: ALIGNMENT_CRAM {
        publishDir = [
            enabled: false
        ]
    }
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC_ASSEMBLYSCAN_PLOT_DATA' {
        publishDir = [
            path: { "${params.outdir}/multiqc/assemblyscan_plot_data" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
